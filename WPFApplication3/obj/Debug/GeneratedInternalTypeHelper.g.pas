//------------------------------------------------------------------------------
// <autogenerated>
//     This Oxygene source code was generated by a tool.
//     Runtime Version: 4.0.30319.42000
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

{$HIDE H7}
{$HIDE W1}
{$HIDE W27}
{$HIDE H11}

namespace XamlGeneratedNamespace;

type
    /// <summary>
    /// GeneratedInternalTypeHelper
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    [System.CodeDom.Compiler.GeneratedCodeAttribute('PresentationBuildTasks', '4.0.0.0')]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    GeneratedInternalTypeHelper = public sealed class(System.Windows.Markup.InternalTypeHelper)
    protected 
    
        method CreateInstance(&type: System.Type; culture: System.Globalization.CultureInfo): System.Object; override;
        begin
            exit System.Activator.CreateInstance(&type, ((System.Reflection.BindingFlags.Public or System.Reflection.BindingFlags.NonPublic) 
                            or (System.Reflection.BindingFlags.Instance or System.Reflection.BindingFlags.CreateInstance)), nil, nil, culture);
        end;
        
        method GetPropertyValue(propertyInfo: System.Reflection.PropertyInfo; target: System.Object; culture: System.Globalization.CultureInfo): System.Object; override;
        begin
            exit propertyInfo.GetValue(target, System.Reflection.BindingFlags.Default, nil, nil, culture);
        end;
        
        method SetPropertyValue(propertyInfo: System.Reflection.PropertyInfo; target: System.Object; value: System.Object; culture: System.Globalization.CultureInfo); override;
        begin
            propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, nil, nil, culture);
        end;
        
        method CreateDelegate(delegateType: System.Type; target: System.Object; handler: System.String): System.Delegate; override;
        begin
            exit (target.GetType().InvokeMember('_CreateDelegate', (System.Reflection.BindingFlags.InvokeMethod 
                            or (System.Reflection.BindingFlags.NonPublic or System.Reflection.BindingFlags.Instance)), nil, target, array of System.Object([delegateType,
                    handler]), nil) as System.Delegate);
        end;
        
        method AddEventHandler(eventInfo: System.Reflection.EventInfo; target: System.Object; handler: System.Delegate); override;
        begin
            eventInfo.AddEventHandler(target, handler);
        end;
        
    end;
    
end.

